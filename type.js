const ln = [[ 'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
'Twinkle twinkle little star',
'How I wonder what you are',
'Up above the world so high',
'Like a diamond in the sky',
],[ 
'#include <conio.h>',
'#include <stdio.h>',
'#include <stdlib.h>',
'#include <unistd.h>',
'int i, j, height = 20, width = 20;',
'int gameover, score;',
'int x, y, fruitx, fruity, flag;',
'// Function to generate the fruit',
'// within the boundary',
'void setup()',
'{',
'gameover = 0;',
'// Stores height and width',
'x = height / 2;',
'y = width / 2;',
'label1:',
'fruitx = rand() % 20;',
'if (fruitx == 0)',
'goto label1;',
'label2:',
'fruity = rand() % 20;',
'if (fruity == 0)',
'goto label2;',
'score = 0;',
'}',
'// Function to draw the boundaries',
'void draw()',
'{',
'system("cls");',
'for (i = 0; i < height; i++) {',
'for (j = 0; j < width; j++) {',
'if (i == 0 || i == width - 1',
'|| j == 0',
'|| j == height - 1) {',
'printf("#");',
'}',
'else {',
'if (i == x && j == y)',
'printf("0");',
'else if (i == fruitx',
'&& j == fruity)',
'printf("*");',
'else',
'printf(" ");',
'}',
'}',
'printf("\n");',
'}',
'// Print the score after the',
'// game ends',
'printf("score = %d", score);',
'printf("\n");',
'printf("press X to quit the game");',
'}',
'// Function to take the input',
'void input()',
'{',
'if (kbhit()) {',
'switch (getch()) {',
'case "a":',
'flag = 1;',
'break;',
'case "s":',
'flag = 2;',
'break;',
'case "d":',
'flag = 3;',
'break;',
'case "w":',
'flag = 4;',
'break;',
'case "x":',
'gameover = 1;',
'break;',
'}',
'}',
'}',
'// Function for the logic behind',
'// each movement',
'void logic()',
'{',
'sleep(0.01);',
'switch (flag) {',
'case 1:',
'y--;',
'break;',
'case 2:',
'x++;',
'break;',
'case 3:',
'y++;',
'break;',
'case 4:',
'x--;',
'break;',
'default:',
'break;',
'}',
'// If the game is over',
'if (x < 0 || x > height',
'|| y < 0 || y > width)',
'gameover = 1;',
'// If snake reaches the fruit',
'// then update the score',
'if (x == fruitx && y == fruity) {',
'label3:',
'fruitx = rand() % 20;',
'if (fruitx == 0)',
'goto label3;',
'// After eating the above fruit',
'// generate new fruit',
'label4:',
'fruity = rand() % 20;',
'if (fruity == 0)',
'goto label4;',
'score += 10;',
'}',
'}',
'// Driver Code',
'void main()',
'{',
'int m, n;',
'// Generate boundary',
'setup();',
'// Until the game is over',
'while (!gameover) {',
'// Function Call',
'draw();',
'input();',
'logic();',
'}',
'}',
],[ '#pragma GCC optimize("Ofast")',
'#pragma GCC optimize("unroll-loops")',
'#pragma GCC target("sse2")',
'#include <bits/stdc++.h>',
'#include <vector>',
'#include <ext/pb_ds/assoc_container.hpp>',
'#include <ext/pb_ds/tree_policy.hpp>',
'using namespace std;',
'// #define int         long long',
'#define ll1          long long',
'#define pb          push_back',
'#define pii         pair<int,int>',
'#define vi          vector<int>',
'#define vii         vector<pii>',
'#define mi          map<int,int>',
'#define mii         map<pii,int>',
'#define mp          make_pair',
'#define all(a)      (a).begin(),(a).end()',
'#define FF           first',
'#define SS           second',
'#define sz(x)       (int)x.size()',
'#define endl        "\n"',
'#define rep(i,a,b)  for(int i=a;i<b;i++)',
'int hell=1000000007;',
'int mod = 998244353;',
'class segtree {',
'public:',
'struct node {',
'll1 sum = 0;',
'll1 add = 0;',
'void apply(int l, int r, int v) {',
'sum += v;',
'add += v;',
'}',
'};',
'node unite(const node &a, const node &b) const {',
'node res;',
'res.sum = a.sum+b.sum;',
'return res;',
'}',
'inline void push(int x, int l, int r) {',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'if (tree[x].add != 0) {',
'tree[x + 1].apply(l, y, tree[x].add);',
'tree[z].apply(y + 1, r, tree[x].add);',
'tree[x].add = 0;',
'}',
'}',
'inline void pull(int x, int z) {',
'tree[x] = unite(tree[x + 1], tree[z]);',
'}',
'int n;',
'vector<node> tree;',
'void build(int x, int l, int r) {',
'if (l == r) {',
'return;',
'}',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'build(x + 1, l, y);',
'build(z, y + 1, r);',
'pull(x, z);',
'}',
'template <typename M>',
'void build(int x, int l, int r, const vector<M> &v) {',
'if (l == r) {',
'tree[x].apply(l, r, v[l]);',
'return;',
'}',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'build(x + 1, l, y, v);',
'build(z, y + 1, r, v);',
'pull(x, z);',
'}',
'node get(int x, int l, int r, int ll, int rr) {',
'if (ll <= l && r <= rr) {',
'return tree[x];',
'}',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'push(x, l, r);',
'node res{};',
'if (rr <= y) {',
'res = get(x + 1, l, y, ll, rr);',
'} else {',
'if (ll > y) {',
'res = get(z, y + 1, r, ll, rr);',
'} else {',
'res = unite(get(x + 1, l, y, ll, rr), get(z, y + 1, r, ll, rr));',
'}',
'}',
'pull(x, z);',
'return res;',
'}',
'template <typename... M>',
'void modify(int x, int l, int r, int ll, int rr, const M&... v) {',
'if (ll <= l && r <= rr) {',
'tree[x].apply(l, r, v...);',
'return;',
'}',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'push(x, l, r);',
'if (ll <= y) {',
'modify(x + 1, l, y, ll, rr, v...);',
'}',
'if (rr > y) {',
'modify(z, y + 1, r, ll, rr, v...);',
'}',
'pull(x, z);',
'}',
'int find_first_knowingly(int x, int l, int r, const function<bool(const node&)> &f) {',
'if (l == r) {',
'return l;',
'}',
'push(x, l, r);',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'int res;',
'if (f(tree[x + 1])) {',
'res = find_first_knowingly(x + 1, l, y, f);',
'} else {',
'res = find_first_knowingly(z, y + 1, r, f);',
'}',
'pull(x, z);',
'return res;',
'}',
'int find_first(int x, int l, int r, int ll, int rr, const function<bool(const node&)> &f) {',
'if (ll <= l && r <= rr) {',
'if (!f(tree[x])) {',
'return -1;',
'}',
'return find_first_knowingly(x, l, r, f);',
'}',
'push(x, l, r);',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'int res = -1;',
'if (ll <= y) {',
'res = find_first(x + 1, l, y, ll, rr, f);',
'}',
'if (rr > y && res == -1) {',
'res = find_first(z, y + 1, r, ll, rr, f);',
'}',
'pull(x, z);',
'return res;',
'}',
'int find_last_knowingly(int x, int l, int r, const function<bool(const node&)> &f) {',
'if (l == r) {',
'return l;',
'}',
'push(x, l, r);',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'int res;',
'if (f(tree[z])) {',
'res = find_last_knowingly(z, y + 1, r, f);',
'} else {',
'res = find_last_knowingly(x + 1, l, y, f);',
'}',
'pull(x, z);',
'return res;',
'}',
'int find_last(int x, int l, int r, int ll, int rr, const function<bool(const node&)> &f) {',
'if (ll <= l && r <= rr) {',
'if (!f(tree[x])) {',
'return -1;',
'}',
'return find_last_knowingly(x, l, r, f);',
'}',
'push(x, l, r);',
'int y = (l + r) >> 1;',
'int z = x + ((y - l + 1) << 1);',
'int res = -1;',
'if (rr > y) {',
'res = find_last(z, y + 1, r, ll, rr, f);',
'}',
'if (ll <= y && res == -1) {',
'res = find_last(x + 1, l, y, ll, rr, f);',
'}',
'pull(x, z);',
'return res;',
'}',
'segtree(int _n) : n(_n) {',
'assert(n > 0);',
'tree.resize(2 * n - 1);',
'build(0, 0, n - 1);',
'}',
'template <typename M>',
'segtree(const vector<M> &v) {',
'n = v.size();',
'assert(n > 0);',
'tree.resize(2 * n - 1);',
'build(0, 0, n - 1, v);',
'}',
'node get(int ll, int rr) {',
'assert(0 <= ll && ll <= rr && rr <= n - 1);',
'return get(0, 0, n - 1, ll, rr);',
'}',
'node get(int p) {',
'assert(0 <= p && p <= n - 1);',
'return get(0, 0, n - 1, p, p);',
'}',
'template <typename... M>',
'void modify(int ll, int rr, const M&... v) {',
'assert(0 <= ll && ll <= rr && rr <= n - 1);',
'modify(0, 0, n - 1, ll, rr, v...);',
'}',
'// find_first and find_last call all FALSE elements',
'// to the left (right) of the sought position exactly once',
'int find_first(int ll, int rr, const function<bool(const node&)> &f) {',
'assert(0 <= ll && ll <= rr && rr <= n - 1);',
'return find_first(0, 0, n - 1, ll, rr, f);',
'}',
'int find_last(int ll, int rr, const function<bool(const node&)> &f) {',
'assert(0 <= ll && ll <= rr && rr <= n - 1);',
'return find_last(0, 0, n - 1, ll, rr, f);',
'}',
'};',
'vector<int> a;',
'const int N = 100010;',
'vector<pii> g[N];',
'int sz[N];',
'int in[N];',
'int out[N];',
'int nxt[N];',
'int p[N];',
'int t = 1;',
'int root;',
'int n;',
'const int MAXN=100010,MAXLOG=18;',
'int h[100010]={0};',
'int par[MAXN][MAXLOG]; // initially all -1',
'void dfs1(int v,int p = 0){',
'par[v][0] = p;',
'if(p + 1)',
'h[v] = h[p] + 1;',
'for(int i = 1;i < MAXLOG;i ++)',
'if(par[v][i-1] + 1)',
'par[v][i] = par[par[v][i-1]][i-1];',
'for(auto u : g[v])  if(p - u.FF)',
'dfs1(u.FF,v);',
'}',
'int LCA(int v,int u){',
'if(h[v] < h[u])',
'swap(v,u);',
'for(int i = MAXLOG - 1;i >= 0;i --)',
'if(par[v][i] + 1 and h[par[v][i]] >= h[u])',
'v = par[v][i];',
'// now h[v] = h[u]',
'if(v == u)',
'return v;',
'for(int i = MAXLOG - 1;i >= 0;i --)',
'if(par[v][i] - par[u][i])',
'v = par[v][i], u = par[u][i];',
'return par[v][0];',
'}',
'void dfs_sz(int v = 0,int par = 0) {',
'sz[v] = 1;',
'p[v] = par;',
'for(auto &x: g[v]) {',
'int u = x.FF;',
'if(u==par)continue;',
'dfs_sz(u,v);',
'sz[v] += sz[u];',
'if(sz[u] > sz[g[v][0].FF]) {',
'swap(x, g[v][0]);',
'}',
'}',
'}',
'void dfs_hld(int v = 0,int w = 0,int par = -1) {',
'in[v] = t++;',
'a.pb(w);',
'for(auto x: g[v]) {',
'int u = x.FF, w = x.SS;',
'if(par == u)continue;',
'nxt[u] = (u == g[v][0].FF ? nxt[v] : u);',
'dfs_hld(u,w,v);',
'}',
'out[v] = t;',
'}',
'void initialize(int n){',
't = 0;',
'for(int i=0;i<n+10;i++){',
'g[i].clear();',
'in[i] = 0;',
'out[i] = 0;',
'nxt[i] = 0;',
'h[i] = 0;',
'}',
'a.clear();',
'// a.pb(0);',
'for(int i=0;i<n+10;i++){',
'for(int j=0;j<MAXLOG;j++){',
'par[i][j] = -1;',
'}',
'}',
'}',
'int solve(){',
'int q,r;',
'cin >> n >> q >> r;',
'initialize(n);',
'root = r;',
'for(int i=1;i<n;i++){',
'int u,v,w;',
'cin >> u >> v >> w;',
'g[u].pb({v,w});',
'g[v].pb({u,w});',
'}',
'dfs1(root);',
'dfs_sz(root);',
'dfs_hld(root);',
'segtree st(a);',
'for(int i=0;i<q;i++){',
'int u,v;',
'cin >> u >> v;',
'int x = LCA(u,v);',
'll1 ans = 0;',
'if(u==x){',
'for(int x = v; x; x = p[nxt[x]]){',
'ans += st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'for(int x = r; x ; x = p[nxt[x]]){',
'ans -= st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'}',
'else if(v==x){',
'for(int x = u; x; x = p[nxt[x]]){',
'ans += st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'for(int x = r; x ; x = p[nxt[x]]){',
'ans -= st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'}',
'else {',
'for(int x = u; x; x = p[nxt[x]]){',
'ans += st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'for(int x = r; x ; x = p[nxt[x]]){',
'ans -= 2*st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'for(int x = v; x; x = p[nxt[x]]){',
'ans += st.get(in[nxt[x]],in[x]+1).sum;',
'}',
'}',
'cout << ans << endl;',
'}',
'return 0;',
'}',
'signed main()',
'{',
'#ifndef ONLINE_JUDGE',
'freopen("input.txt", "r" , stdin);',
'freopen("output.txt", "w", stdout);',
'#endif',
'ios::sync_with_stdio(false);',
'cin.tie(0);',
'cout.tie(0);',
'int t=1,k=1;',
'cin>>t;',
'while(t--)',
'{',
'// cout<<"Case #"<<k++<<": ";',
'solve();',
'// cout<<endl;',
'}',
'return 0;',
'}',
], [ 'import java.io.OutputStream;',
'import java.io.IOException;',
'import java.io.InputStream;',
'import java.io.OutputStream;',
'import java.io.IOException;',
'import java.util.InputMismatchException;',
'import java.io.InputStreamReader;',
'import java.io.BufferedOutputStream;',
'import java.util.StringTokenizer;',
'import java.io.Closeable;',
'import java.io.BufferedReader;',
'import java.io.InputStream;',
'import java.io.Flushable;',
'/**',
'* Built using CHelper plug-in',
'* Actual solution is at the top',
'*/',
'public class Main {',
'static class TaskAdapter implements Runnable {',
'@Override',
'public void run() {',
'InputStream inputStream = System.in;',
'OutputStream outputStream = System.out;',
'Input in = new Input(inputStream);',
'Output out = new Output(outputStream);',
'A2DeathStarsMedium solver = new A2DeathStarsMedium();',
'solver.solve(1, in, out);',
'out.close();',
'}',
'}',
'public static void main(String[] args) throws Exception {',
'Thread thread = new Thread(null, new TaskAdapter(), "", 1<<29);',
'thread.start();',
'thread.join();',
'}',
'static class A2DeathStarsMedium {',
'public A2DeathStarsMedium() {',
'}',
'public void solve(int kase, Input in, Output pw) {',
'int n = in.nextInt(), m = in.nextInt();',
'char[][] a = new char[n][m], b = new char[m][n];',
'for(int i = 0; i<n; i++) {',
'a[i] = in.next().toCharArray();',
'}',
'for(int i = 0; i<m; i++) {',
'b[i] = in.next().toCharArray();',
'}',
'int[] ah = new int[n];',
'for(int i = 0; i<n; i++) {',
'long p = 31, mod = 1000000009, hash = 0, pow = 1;',
'for(int j = 0; j<m; j++) {',
'hash = (hash+(a[i][j]-a+1)*pow)%mod;',
'pow = (pow*p)%mod;',
'}',
'ah[i] = (int) hash;',
'}',
'int[][] bh = new int[m][n-m+1];',
'for(int i = 0; i<m; i++) {',
'for(int j = 0; j<n-m+1; j++) {',
'long p = 31, mod = 1000000009, hash = 0, pow = 1;',
'for(int k = 0; k<m; k++) {',
'hash = (hash+(b[i][j+k]-a+1)*pow)%mod;',
'pow = (pow*p)%mod;',
'}',
'bh[i][j] = (int) hash;',
'}',
'}',
'for(int i = 0; i<n-m+1; i++) {',
'loop:',
'for(int j = 0; j<n-m+1; j++) {',
'for(int k = 0; k<m; k++) {',
'if(ah[i+k]!=bh[k][j]) {',
'continue loop;',
'}',
'}',
'pw.println(i+1, j+1);',
'return;',
'}',
'}',
'}',
'}',
'static class Output implements Closeable, Flushable {',
'public StringBuilder sb;',
'public OutputStream os;',
'public int BUFFER_SIZE;',
'public boolean autoFlush;',
'public String LineSeparator;',
'public Output(OutputStream os) {',
'this(os, 1<<16);',
'}',
'public Output(OutputStream os, int bs) {',
'BUFFER_SIZE = bs;',
'sb = new StringBuilder(BUFFER_SIZE);',
'this.os = new BufferedOutputStream(os, 1<<17);',
'autoFlush = false;',
'LineSeparator = System.lineSeparator();',
'}',
'public void print(String s) {',
'sb.append(s);',
'if(autoFlush) {',
'flush();',
'}else if(sb.length()>BUFFER_SIZE >> 1) {',
'flushToBuffer();',
'}',
'}',
'public void println(Object... o) {',
'for(int i = 0; i<o.length; i++) {',
'if(i!=0) {',
'print(" ");',
'}',
'print(String.valueOf(o[i]));',
'}',
'println();',
'}',
'public void println() {',
'sb.append(LineSeparator);',
'}',
'private void flushToBuffer() {',
'try {',
'os.write(sb.toString().getBytes());',
'}catch(IOException e) {',
'e.printStackTrace();',
'}',
'sb = new StringBuilder(BUFFER_SIZE);',
'}',
'public void flush() {',
'try {',
'flushToBuffer();',
'os.flush();',
'}catch(IOException e) {',
'e.printStackTrace();',
'}',
'}',
'public void close() {',
'flush();',
'try {',
'os.close();',
'}catch(IOException e) {',
'e.printStackTrace();',
'}',
'}',
'}',
'static class Input {',
'BufferedReader br;',
'StringTokenizer st;',
'public Input(InputStream is) {',
'this(is, 1<<20);',
'}',
'public Input(InputStream is, int bs) {',
'br = new BufferedReader(new InputStreamReader(is), bs);',
'st = null;',
'}',
'public boolean hasNext() {',
'try {',
'while(st==null||!st.hasMoreTokens()) {',
'String s = br.readLine();',
'if(s==null) {',
'return false;',
'}',
'st = new StringTokenizer(s);',
'}',
'return true;',
'}catch(Exception e) {',
'return false;',
'}',
'}',
'public String next() {',
'if(!hasNext()) {',
'throw new InputMismatchException();',
'}',
'return st.nextToken();',
'}',
'public int nextInt() {',
'return Integer.parseInt(next());',
'}',
'}',
'}',
], [ 'from sys import stdin',
'from collections import defaultdict',
'import heapq',
'n = int(stdin.readline())',
'a = [[] for _ in range(n)]',
'for _ in range(n-1):',
"e = stdin.readline().split(' ')",
'u, v = int(e[0]), int(e[1])',
'a[u-1].append(v-1)',
'a[v-1].append(u-1)',
'leaves = [i for i in range(n) if len(a[i]) == 1]',
'def dfs_from(root):',
'depth = defaultdict(int)',
'child = {}',
'parent = defaultdict(lambda: -1)',
'stack = [root]',
'visited = [False for _ in range(n)]',
'while len(stack) > 0:',
'crt = stack[-1]',
'if visited[crt]:',
'stack.pop(-1)',
'if len(a[crt]) > 1:  # not a leaf',
'child[crt], depth[crt] = max([(c, depth[c]+1) for c in a[crt]',
'if c != parent[crt]],',
'key=lambda x: x[1])',
'else:',
'child[crt] = -1',
'depth[crt] = 0',
'continue',
'visited[crt] = True',
'for next in a[crt]:',
'if next != parent[crt]:',
'stack.append(next)',
'parent[next] = crt',
'return depth, child',
'first_choice = leaves[0]',
'd1, child1 = dfs_from(first_choice)',
'root = max([(a[leaf][0], d1[a[leaf][0]]) for leaf in leaves],',
'key=lambda leaf_depth: leaf_depth[1])[0]',
'while child1[root] != -1:',
'root = child1[root]',
'depth, child = dfs_from(root)',
'solution = [1]',
'pq = []',
'for k, v in depth.items():',
'heapq.heappush(pq, (-v, k))',
'seen = [False for _ in range(n)]',
'seen[root] = True',
'while len(pq) > 0:',
'_, best = heapq.heappop(pq)',
'if seen[best]:',
'continue',
'path = []',
'c = best',
's = 0',
'while c != -1:',
'seen[c] = True',
'c = child[c]',
's = s+1',
's = s + solution[-1]',
'solution.append(s)',
'for _ in range(n - min(len(solution), n)):',
'solution.append(n)',
"print(' '.join([str(s) for s in solution]))",
], [ '<!DOCTYPE html>',
'<html lang="en">',
'<head>',
'<title>Simple Speed Typer</title>',
'<link rel="stylesheet" href="type.css">',
'</head>',
'<body>',
'<h1 id = "main_heading"> Code Typing</h1>',
'<!-- <h3 id = "second_main"> Improve your typing speed <h3> -->',
'<div class="left-side_bar">',
'<h2>Select language</h2>',
'<p id = "lang1" class = "lang">TEXT</p>',
'<p id = "lang2" class = "lang">C</p>',
'<p id = "lang3" class = "lang">C++</p>',
'<p id = "lang4" class = "lang">JAVA</p>',
'<p id = "lang5" class = "lang">PYTHON</p>',
'<p id = "lang6" class = "lang">HTML</p>',
'<p id = "lang7" class = "lang">CSS</p>',
'<p id = "lang8" class = "lang">JAVASCRIPT</p>',
'</div>',
'<div class="right-side_bar">',
'<h2>Your Profile</h2>',
'<p id = "pro1" class = "pro">Name </p"\r\n">',
'<p id = "pro2" class = "pro">HighScore</p>',
'<p id = "pro3" class = "pro">Email</p>',
'<p id = "pro4" class = "pro">Login</p>',
'<!-- <p id = "pro5" class = "pro">Help</p> -->',
'</div>',
'<div class = "main_content">',
'<div class="out">',
'Hello...',
'</div>',
'</div>',
'<br>',
'<div class = "main">',
'<textarea name="input" class="inp" placeholder="Start here..." rows="2"></textarea>',
'</div>',
'</br>',
'<div id = "reset_thing">',
'<div class = "center1"><button class="start_btn">Start</button></div>',
'<div class = "result">',
'<p> <span id = "time"> 01:00 </span> Second</p>',
'</div>',
'</div>',
'<div class = "result">',
'<p><span id = "speed"> 0 </span> WPM</p>',
'<p> <span id = "accuracy"> 0 </span> Accuracy</p>',
'<p> <span id = "errors"> 0 </span> Errors</p>',
'</div>',
'<script src="type.js"></script>',
'</body>',
'</html>',
], [ 'body{',
'background-color: #c5e0db;',
'}',
'#main_heading{',
'background-color: #3563a1;',
'text-align: center;',
'color : white;',
'}',
'#second_main{',
'text-align: center;',
'}',
'.left-side_bar{',
'/* display: flex; */',
'width:  15%;',
'background-color: white;',
'position: fixed;',
'z-index: 1;',
'left: 0;',
'overflow-x: hidden;',
'padding-top: 2px;',
'border : 5px solid grey;',
'}',
'.left-side_bar p{',
'margin: 10px;',
'border-style: outset;',
'padding-left: 5px ;',
'font-size: 20px;',
'color: black;',
'display: block;',
'font-size: 1.8vw;',
'}',
'.left-side_bar p:hover{',
'background-color: white;',
'}',
'.right-side_bar{',
'/* display: flex; */',
'margin-top: 0%;',
'width:  18%;',
'background-color: orange;',
'position: fixed;',
'z-index: 1;',
'right: 0;',
'overflow-x: hidden;',
'padding-top: 2px;',
'border : 5px solid grey;',
'}',
'.right-side_bar p{',
'margin: 10px;',
'border-style: outset;',
'padding-left: 5px ;',
'font-size: 20px;',
'color: #818181;',
'display: block;',
'font-size: 1.8vw;',
'background-color: lime;',
'}',
'.right-side_bar p:hover{',
'color: white;',
'background-color:black;',
'}',
'.main_content{',
'margin: auto;',
'width: 60vw;',
'height: 12vh;',
'padding: 1px;',
'background-color: pink;',
'border: 2px solid green;',
'}',
'.out{',
'padding-top : 5px;',
'padding-bottom: 5px;',
'width: 100vw;',
'height: 100vh;',
'font-size: 16px;',
'font-size: 4vh;',
'color: black;',
'}',
'.main{',
'margin: auto;',
'width: 60vw;',
'padding: 7px;',
'}',
'.main textarea{',
'padding-top : 5px;',
'padding-bottom: 5px;',
'width: 99%;',
'font-size: 20px;',
'color: black;',
'border: 3px solid green;',
'}',
'.result{',
'width: 40%;',
'text-align: center;',
'margin: 3%;',
'margin-left: 30%;',
'}',
'.result p{',
'padding : 1%;',
'border: /* 1px solid black */outset;',
'width : 20%;',
'margin-left: 0%;',
'background-color: pink;',
'display: inline-block;',
'font-size: 1.2vw;',
'}',
'#reset_thing{',
'width:100%;',
'text-align: center;',
'}',
'.center1{',
'display: inline-block;',
'}',
'.center1 button:hover{',
'background-color: white;',
'color: red;',
'}',
], [ 'const content = document.querySelector(".reset_btn");',
'const span1 = document.querySelector("#speed");',
'const span2 = document.querySelector("#accuracy");',
'const span3 = document.querySelector("#errors");',
'const span4 = document.querySelector("#time");',
'var lang = [] ;',
'lang[0] = document.querySelector("#lang1");',
'lang[1] = document.querySelector("#lang2");',
'lang[2] = document.querySelector("#lang3");',
'lang[3] = document.querySelector("#lang4");',
'lang[4] = document.querySelector("#lang5");',
'lang[5] = document.querySelector("#lang6");',
'lang[6] = document.querySelector("#lang7");',
'lang[7] = document.querySelector("#lang8");',
'const main_content = document.querySelector(".main_content");',
'const main = document.querySelector(".main");',
'const out = document.querySelector(".out");',
'const inp = document.querySelector(".inp");',
'var timer = 0 , speed = 0 , accuracy = 0 , error = 0 , total = 0 , correct = 0 ;',
'var counter = 0 , current_lan = 0;',
'var startTime = 0;',
'var endTime = 0;',
'var boolean = false;',
'out.innerText = lan[current_lan][counter]+"\r\n";',
'out.innerText += lan[current_lan][counter+1];',
'counter = 1;',
'lang[0].style.backgroundColor = "orange";',
'function change_info(){',
'span1.innerHTML = Math.trunc(speed);',
'span2.innerHTML = Math.trunc(accuracy);',
'span3.innerHTML = Math.trunc(error);',
'}',
'function reset(){',
'timer = 0;',
'speed = 0;',
'accuracy = 0;',
'error = 0;',
'total = 0;',
'}',
'function display(){',
'out.innerText = lan[current_lan][counter]+"\r\n";',
'out.innerText += lan[current_lan][counter+1]+"\r\n";',
'counter++;',
'}',
'function change_content(val){',
'reset();',
'counter = 0;',
'var x= current_lan;',
'lang[x].style.backgroundColor = "white";',
'current_lan = val;',
'var x= current_lan;',
'lang[x].style.backgroundColor = "orange";',
'display(val);',
'}',
'if(boolean == false)',
'change_content(0);',
'})',
'if(boolean == false)',
'change_content(1);',
'})',
'if(boolean == false)',
'change_content(2);',
'})',
'if(boolean == false)',
'change_content(3);',
'})',
'if(boolean == false)',
'change_content(4);',
'if(boolean == false)',
'change_content(5);',
'})',
'if(boolean == false)',
'change_content(6);',
'})',
'if(boolean == false)',
'change_content(7);',
'})',
'function do_math(cur,str){',
'let i = cur.length, j = str.length;',
'console.log(cur);',
'console.log(str);',
'total += i;',
'for(let k = 0 ; k < Math.min(i,j); k++){',
'if(cur[k] == str[k]){',
'++correct;',
'}',
'}',
'endTime = performance.now();',
'time = (endTime - startTime)/1000;',
'error = (total - correct);',
'accuracy = (correct/total)*100;',
'speed = (correct*12)/(time);',
'change_info();',
'}',
'function helper() {',
'if(boolean ){',
'console.log(inp.innerText);',
'const str = inp.value;',
'const cur = lan[current_lan][counter-1];',
'display();',
'do_math(cur,str);',
'inp.value = "";',
'}',
'}',
'main.addEventListener("keyup", function(event) {',
'event.preventDefault();',
'if (event.keyCode === 13) {',
'helper();',
'}',
'});',
'function startTimer(duration, display) {',
'var timer = duration, minutes, seconds;',
'let timer_Id = setInterval(function () {',
'minutes = parseInt(timer / 60, 10);',
'seconds = parseInt(timer % 60, 10);',
'minutes = minutes < 10 ? "0" + minutes : minutes;',
'seconds = seconds < 10 ? "0" + seconds : seconds;',
'display.textContent = minutes + ":" + seconds;',
'// console.log(timer);',
'if (--timer < 0) {',
'boolean = false;',
'display.textContent = "01:00";',
'helper();',
'inp.innerText = "";',
'setTimeout(() => { clearInterval(timer_Id); console.log("stop"); }, 0);',
'}',
'}, 1000);',
'}',
'start_btn.addEventListener("click",() => {',
'if(boolean == false){',
'boolean = true;',
'reset();',
'inp.value = "";',
'startTime = performance.now();',
'var OneMinutes = 60 ,',
'display = document.querySelector("#time");',
'startTimer(OneMinutes, display);',
'}',
'})',
] ] ;

const lan = new Array();
for(var i=0;i<8;i++){
    lan.push(ln[i]);
}



const content = document.querySelector('.reset_btn');
const span1 = document.querySelector('#speed');
const span2 = document.querySelector('#accuracy');
const span3 = document.querySelector('#errors');
const span4 = document.querySelector('#time');

var lang = [] ;
lang[0] = document.querySelector('#lang1');
lang[1] = document.querySelector('#lang2');
lang[2] = document.querySelector('#lang3');
lang[3] = document.querySelector('#lang4');
lang[4] = document.querySelector('#lang5');
lang[5] = document.querySelector('#lang6');
lang[6] = document.querySelector('#lang7');
lang[7] = document.querySelector('#lang8');

const main_content = document.querySelector('.main_content');
const main = document.querySelector('.main');

const out = document.querySelector('.out');
const inp = document.querySelector('.inp');

const start_btn = document.querySelector('.start_btn');
const reset_btn = document.querySelector('.reset_btn');
const stop_btn = document.querySelector('.stop_btn');


var timer = 0 , speed = 0 , accuracy = 0 , error = 0 , total = 0 , correct = 0 ;
var counter = 0 , current_lan = 0;
var startTime = 0;
var endTime = 0;
var boolean = false;
out.innerText = lan[current_lan][counter]+"\r\n";
out.innerText += lan[current_lan][counter+1];
counter = 1;
lang[0].style.backgroundColor = "orange";



function change_info(){
    span1.innerHTML = Math.trunc(speed);
    span2.innerHTML = Math.trunc(accuracy);
    span3.innerHTML = Math.trunc(error);
}   

function reset(){
    timer = 0;
    speed = 0;
    accuracy = 0;
    error = 0;
    total = 0;
}

function display(){
     out.innerText = lan[current_lan][counter]+"\r\n";
     out.innerText += lan[current_lan][counter+1]+"\r\n";
     counter++;
}

function change_content(val){
   reset();
   counter = 0;
   var x= current_lan;
   lang[x].style.backgroundColor = "white";
   current_lan = val;
   var x= current_lan;
   lang[x].style.backgroundColor = "orange";
   display(val);  
}



lang[0].addEventListener('click',() => {
    if(boolean == false)
    change_content(0);
})

lang[1].addEventListener('click',() => {
    if(boolean == false)
    change_content(1);
})

lang[2].addEventListener('click',() => {
    if(boolean == false)
    change_content(2);
})

lang[3].addEventListener('click',() => {
    if(boolean == false)
    change_content(3);
})

lang[4].addEventListener('click',() => {
    if(boolean == false)
    change_content(4);
})

lang[5].addEventListener('click',() => {
    if(boolean == false)
    change_content(5);
})

lang[6].addEventListener('click',() => {
    if(boolean == false)
    change_content(6);
})

lang[7].addEventListener('click',() => {
    if(boolean == false)
    change_content(7);
})




function do_math(cur,str){
    let i = cur.length, j = str.length;
    console.log(cur);
    console.log(str);
    total += i;
    for(let k = 0 ; k < Math.min(i,j); k++){
        if(cur[k] == str[k]){
            ++correct;
        }
    }
    endTime = performance.now();
    time = (endTime - startTime)/1000;
    error = (total - correct);
    accuracy = (correct/total)*100;
    speed = (correct*10)/(time);
    change_info();
}

function helper() {
    if(boolean ){
        console.log(inp.innerText);
        const str = inp.value;
        const cur = lan[current_lan][counter-1];
        display();
        do_math(cur,str);
        inp.value = "";
    }
}

main.addEventListener("keyup", function(event) {
    event.preventDefault();
    if (event.keyCode === 13) {
        helper();
    }
});


function startTimer(duration, display) {
    var timer = duration, minutes, seconds;
    let timer_Id = setInterval(function () {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        display.textContent = minutes + ":" + seconds;
        // console.log(timer);

        if (--timer < 0) {
            boolean = false;
            display.textContent = "01:00";
            helper();
            inp.innerText = "";
            alert("Time_out");
            setTimeout(() => { clearInterval(timer_Id); console.log('stop'); }, 0);               
        }
    }, 1000); 
}


start_btn.addEventListener('click',() => {
    if(boolean == false){
            boolean = true;
            reset();
            inp.value = "";
        startTime = performance.now();
        var OneMinutes = 60 ,
        display = document.querySelector('#time');
        startTimer(OneMinutes, display);
    }
    
})










